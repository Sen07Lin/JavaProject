import java.util.Arrays;
import java.util.Collection;


public class MyDynamicArray<T> implements DynamicArrayInterface<T> {
	
	//Add instance variables here, they must be private
	private T[] items;
	private int count;
	@Override
	public void add(T toAdd) {
		if (!contains(toAdd)) {
            if (toAdd != null) {
                if (count < this.items.length) {
                    items[count] = toAdd;
                    count++;
                } else {
                	 //[] newItems = new T[items.length * 2];
                    items = Arrays.copyOf(items, items.length * 2);
                    items[count] = toAdd;
                    count++;
                }
            }
        }
	}

	@Override
	public void addAll(Collection<T> collection) {
		// TODO Auto-generated method stub
		if (!collection.isEmpty()) {
            for (T element : collection) {
                add(element);
                //System.out.println("HI");
            }
        }
		
	}

	@SuppressWarnings("unchecked")
	@Override
	public T remove(T toRemove) {
		if (contains(toRemove)) {
            if (toRemove != null) {
                int index = indexOf(toRemove);
                Object[] newArray = new Object[items.length - 1];
                for (int i = 0; i < index; i++) {
                    newArray[i] = items[i];
                }
                for (int a = index; a < newArray.length; a++) {
                    newArray[a] = items[a + 1];
                }
                count--;
                items = (T[]) newArray;
                return toRemove;
            }
        }
		return null;
	}

	private int indexOf(Object o) {
        if (o != null) {
            for (int i = 0; i < items.length; i++) {
                if (o.equals(items[i])) {
                    return i;
                }
            }
        }
        return -1;
    }

	@SuppressWarnings("unchecked")
	@Override
	public T remove(int index) {
		if (contains(get(index))) {
                Object[] newArray = new Object[items.length - 1];
                for (int i = 0; i < index; i++) {
                    newArray[i] = items[i];
                }
                for (int a = index; a < newArray.length; a++) {
                    newArray[a] = items[a + 1];
                }
                count--;
                items = (T[]) newArray;
                return get(index);
            }
		return null;
	}

	@Override
	public T get(int index) {
		if (index <= count && index >= 0){
			return items[index];
		} else {
			return null;
		}
	}

	@Override
	public boolean contains(T obj) {
		// TODO Auto-generated method stub
		return (indexOf(obj) >= 0);
	}
	
	@Override
	public T[] toArray(){
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean isEmpty() {
		return size() == 0;
	}

	@Override
	public void clear() {
		while (!isEmpty()){
			remove(count);
			count--;
		}
	}

	@Override
	public int size() {
		return count;
	}

}
