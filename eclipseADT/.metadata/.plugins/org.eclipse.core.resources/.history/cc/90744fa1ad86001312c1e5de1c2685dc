import java.util.Collection;


public class MyDynamicArray<T> implements DynamicArrayInterface<T> {
	
	//Add instance variables here, they must be private
	private T[] items;
	private int count;
	private static final int DEFAULT_INITIAL_CAPACITY = 10;
	public MyDynamicArray() {
        this(DEFAULT_INITIAL_CAPACITY);
    }
    
    /** 
     * Creates an empty bag having a given initial capacity.
     * @param capacity  the integer capacity desired */
    public MyDynamicArray(int capacity) {
    	count = 0;
        // the cast is safe because the new array contains null entries
        @SuppressWarnings("unchecked")
            T[] tempItems = (T[])new Object[capacity]; // unchecked cast
        items = tempItems;
    }
	@Override
	public void add(T toAdd) {
            if (toAdd != null) {
                if (count < this.items.length) {
                    items[count++] = toAdd;
                } else {
                	Object[] newArray = new Object[items.length*2];
                	for (int i = 0; i < count; i++) {
                        newArray[i] = items[i];
                    }
                    items[count++] = toAdd;
                }
            }
	}

	@Override
	public void addAll(Collection<T> collection) {
		if (!collection.isEmpty()) {
            for (T element : collection) {
                add(element);
            }
        }
		
	}
	@Override
	public T remove(T toRemove) {
		return remove(indexOf(toRemove));
	}

	private int indexOf(Object o) {
        if (o != null) {
            for (int i = 0; i < items.length; i++) {
                if (o.equals(items[i])) {
                    return i;
                }
            }
        }
        return -1;
    }

	@SuppressWarnings("unchecked")
	@Override
	public T remove(int index) {
		T result = get(index);
		if (contains(items[index])) {
                Object[] newArray = new Object[items.length - 1];
                for (int i = 0; i < index; i++) {
                    newArray[i] = items[i];
                }
                for (int a = index; a < newArray.length; a++) {
                    newArray[a] = items[a + 1];
                }
                count--;
                items = (T[]) newArray;
            }
		return result;
	}

	@Override
	public T get(int index) {
		if (index <= count && index >= 0){
			return items[index];
		} else {
			return null;
		}
	}

	@Override
	public boolean contains(T obj) {
		return (indexOf(obj) >= 0);
	}
	
	@Override
	public T[] toArray(){
		@SuppressWarnings("unchecked")
        T[] result = (T[])new Object[count]; // unchecked cast
		for (int index = 0; index < count; index++) {
		    result[index] = items[index];
		}
		return result;
	}

	@Override
	public boolean isEmpty() {
		return size() == 0;
	}

	@Override
	public void clear() {
		while (!isEmpty()){
			remove(0);
		}
	}
	@Override
	public int size() {
		return count;
	}

}
