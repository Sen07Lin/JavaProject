import java.util.Iterator;
/**
 * This is a Doubly LinkedList that has both a head an tail pointer.
 */
public class DoublyLinkedList<T> implements LinkedListInterface<T>, Iterable<T> {
    private Node<T> head;
    private Node<T> tail;
    private int size;
    @SuppressWarnings("unused")
    private class MyIterator<E> implements Iterator<E> {
        private Node<E> node;
        @Override
        public boolean hasNext() {
            if (node.getNext() != null) {
                node = node.getNext();
                return true;
            }
            return false;
        }
        @Override
        public E next() {
            if (hasNext()) {
                node = node.getNext();
                return node.getData();
            }
            return null;
        }
        @Override
        public void remove() {
        }
    } // end of inner class
    @Override
    public boolean add(int index, T data) {
        if (data != null && index >= 0) {
            Node<T> newNode = new Node<T>(data);
            System.out.println("herere" + newNode.getData());
            if (index == size && tail != null) {
                Node<T> cur = tail;
                cur.setNext(newNode);
                newNode.setNext(null);
                newNode.setPre(cur);
                tail = newNode;
                System.out.println("size is");
            } else if (tail != null) {
                Node<T> cur = getHead();
                if (index != size) {
                    int i = 0;
                    while (cur.getNext() != null && i < index) {
                        cur = cur.getNext();
                    }
                    newNode.setNext(cur);
                    newNode.setPre(cur.getPrev());
                    cur.setPre(newNode);
                    if (newNode.getPrev() == null) {
                        head = newNode;
                    }
                    System.out.println(newNode.getData());
                } else {
                    newNode.setNext(null);
                    newNode.setPre(null);
                    head = newNode;
                    tail = head;
                    System.out.println("hh");
                }
            }
            size++;
            return true;
        }
        return false;
    }
    public boolean addFront(T data) {
        return add(0, data);
    }
    public boolean addBack(T data) {
        return add(size, data);
    }
    @Override
    public void clear() {
        while (!isEmpty()) {
            remove(0);
        }
        size = 0;
    }
    @Override
    public boolean contains(Object o) {
        @SuppressWarnings("unchecked")
        T obj = (T) o;
        return indexOf(obj) >= 0;
    }
    @Override
    public T get(int index) {
        if (index >= 0 && index < size - 1) {
            return getNode(index).getData();
        }
        return null;
    }
    public Node<T> getNode(int index) {
        if (index >= 0 && index < size - 1) {
            Node<T> cur = getHead();
            int i = 0;
            while (cur.getNext() != null && i < index) {
                cur = cur.getNext();
            }
            return cur;
        }
        return null;
    }
    @Override
    public int indexOf(T data) {
        if (data != null) {
            Node<T> cur = getHead();
            int i = 0;
            while (cur.getNext() != null && !cur.getNext().equals(data)) {
                cur = cur.getNext();
                i++;
            }
            // if data is found in the list then i should less than size
            if (i < size) {
                return i;
            } else {
                return -1; // data not found
            }
        }
        return -1; // data is null
    }
    @Override
    public boolean isEmpty() {
        return size == 0;
    }
    @Override
    public T remove(Object o) {
        if (o != null && contains(o)) {
            @SuppressWarnings("unchecked")
            T obj = (T) o;
            return remove(indexOf(obj));
        }
        return null;
    }
    @Override
    public T remove(int index) {
        if (getNode(index) != null) {
            size--;
            Node<T> cur = getNode(index);
            T result = cur.getData();
            Node<T> next = cur.getNext();
            Node<T> prev = cur.getPrev();
            if (prev == null) {
                // remove the head node
                next.setPre(null);
            } else if (next == null) {
                // remove the tail node
                prev.setNext(null);
            } else {
                // remove the middle node
                prev.setNext(next);
                next.setPre(prev);
            }
            return result;
        }
        return null;
    }
    @Override
    public T replace(int index, T data) {
        if (data != null) {
            Node<T> cur = getHead();
            int i = 0;
            while (cur.getNext() != null && i < index) {
                cur = cur.getNext();
            }
            T original = cur.getData();
            cur.setData(data);
            return original;
        }
        return null;
    }
    @Override
    public int size() {
        return size;
    }
    @Override
    public Node<T> getHead() {
        return head;
    }
    @Override
    public void reverseList() {
        // TODO
    }
    @Override
    public Iterator<T> iterator() {
        MyIterator<T> iterator = new MyIterator<>();
        return iterator;
    }
    @Override
    public String toString() {
        StringBuffer sb = new StringBuffer("[");
        for (Node<T> node = tail; node != null; node = node.getPrev()) {
            sb.append(node.getData() + " ");
        }
        return sb.toString() + "]";
    }
    public static void main(String[] args) {
        DoublyLinkedList<String> list = new DoublyLinkedList<>();
        for (int i = 0; i < 8; i++) {
            list.addFront("" + i);
        }
        System.out.println("add to front" + list.toString());
        DoublyLinkedList<String> list2 = new DoublyLinkedList<>();
        for (int i = 0; i < 8; i++) {
            list2.addBack("" + i);
        }
        System.out.println("add to Back" + list2.toString());
    }
}